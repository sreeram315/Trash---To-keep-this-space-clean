
lcd_blinking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c0  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000040a  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000127  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000350  00000000  00000000  00000e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f8  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ec       	ldi	r30, 0xC0	; 192
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	30 c0       	rjmp	.+96     	; 0xbc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:

#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRB = 0xff;
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	87 bb       	out	0x17, r24	; 23
	int i=0;
    while(1)
    {
		for(i=0;i<4;i++)
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	90 e0       	ldi	r25, 0x00	; 0
		{
        PORTB |= (1<<i);		
  66:	a1 e0       	ldi	r26, 0x01	; 1
  68:	b0 e0       	ldi	r27, 0x00	; 0
{
	DDRB = 0xff;
	int i=0;
    while(1)
    {
		for(i=0;i<4;i++)
  6a:	c0 e0       	ldi	r28, 0x00	; 0
  6c:	d0 e0       	ldi	r29, 0x00	; 0
		{
        PORTB |= (1<<i);		
  6e:	e8 b3       	in	r30, 0x18	; 24
  70:	9d 01       	movw	r18, r26
  72:	08 2e       	mov	r0, r24
  74:	02 c0       	rjmp	.+4      	; 0x7a <main+0x1c>
  76:	22 0f       	add	r18, r18
  78:	33 1f       	adc	r19, r19
  7a:	0a 94       	dec	r0
  7c:	e2 f7       	brpl	.-8      	; 0x76 <main+0x18>
  7e:	3e 2f       	mov	r19, r30
  80:	32 2b       	or	r19, r18
  82:	38 bb       	out	0x18, r19	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	4f e3       	ldi	r20, 0x3F	; 63
  86:	5d e0       	ldi	r21, 0x0D	; 13
  88:	63 e0       	ldi	r22, 0x03	; 3
  8a:	41 50       	subi	r20, 0x01	; 1
  8c:	50 40       	sbci	r21, 0x00	; 0
  8e:	60 40       	sbci	r22, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x2c>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x36>
  94:	00 00       	nop
		_delay_ms(1000);
		PORTB &=~ (1<<i);
  96:	38 b3       	in	r19, 0x18	; 24
  98:	20 95       	com	r18
  9a:	23 23       	and	r18, r19
  9c:	28 bb       	out	0x18, r18	; 24
  9e:	2f e3       	ldi	r18, 0x3F	; 63
  a0:	3d e0       	ldi	r19, 0x0D	; 13
  a2:	43 e0       	ldi	r20, 0x03	; 3
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	40 40       	sbci	r20, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x46>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x50>
  ae:	00 00       	nop
{
	DDRB = 0xff;
	int i=0;
    while(1)
    {
		for(i=0;i<4;i++)
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	84 30       	cpi	r24, 0x04	; 4
  b4:	91 05       	cpc	r25, r1
  b6:	dc f2       	brlt	.-74     	; 0x6e <main+0x10>
  b8:	ce 01       	movw	r24, r28
  ba:	d9 cf       	rjmp	.-78     	; 0x6e <main+0x10>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
