
Home_automation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  0000047e  00000512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080013e  0080013e  000005f0  2**0
                  ALLOC
  3 .stab         000008b8  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000144  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fd  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000215  00000000  00000000  0000196d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000483  00000000  00000000  00001b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00002008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000137  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014b  00000000  00000000  000021cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000231a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 33       	cpi	r26, 0x3E	; 62
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae e3       	ldi	r26, 0x3E	; 62
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 34       	cpi	r26, 0x4F	; 79
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 82 00 	call	0x104	; 0x104 <main>
  8a:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <buzzer>:
 */ 
#ifndef _Buzzer_
#define _Buzzer_
void buzzer()
	{
			PORTA|=(1<<PA7);
  92:	df 9a       	sbi	0x1b, 7	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	91 ee       	ldi	r25, 0xE1	; 225
  98:	a4 e0       	ldi	r26, 0x04	; 4
  9a:	81 50       	subi	r24, 0x01	; 1
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	a0 40       	sbci	r26, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <buzzer+0x8>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <buzzer+0x12>
  a4:	00 00       	nop
			_delay_ms(100);
			PORTA&=~(1<<PA7);
  a6:	df 98       	cbi	0x1b, 7	; 27
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	91 ee       	ldi	r25, 0xE1	; 225
  ac:	a4 e0       	ldi	r26, 0x04	; 4
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	a0 40       	sbci	r26, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <buzzer+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <buzzer+0x26>
  b8:	00 00       	nop
			_delay_ms(100);
	}			
  ba:	08 95       	ret

000000bc <tt>:
#ifndef _UART_H_
#define _UART_H_
#define delay _delay_ms(2000)
void tt(unsigned char t)
{
	while(!(UCSRA&(1<<UDRE)));				// hold until conversion is completed
  bc:	5d 9b       	sbis	0x0b, 5	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <tt>
	UDR=t;									// PUT data into UDR registor
  c0:	8c b9       	out	0x0c, r24	; 12
}
  c2:	08 95       	ret

000000c4 <usart_tx>:
void usart_tx(unsigned char *tx)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ec 01       	movw	r28, r24
	while(*tx!='\0')						// transfer data until we get NULL character ('\0')
  ca:	88 81       	ld	r24, Y
  cc:	88 23       	and	r24, r24
  ce:	31 f0       	breq	.+12     	; 0xdc <usart_tx+0x18>
void tt(unsigned char t)
{
	while(!(UCSRA&(1<<UDRE)));				// hold until conversion is completed
	UDR=t;									// PUT data into UDR registor
}
void usart_tx(unsigned char *tx)
  d0:	21 96       	adiw	r28, 0x01	; 1
{
	while(*tx!='\0')						// transfer data until we get NULL character ('\0')
	{
		tt(*tx);
  d2:	0e 94 5e 00 	call	0xbc	; 0xbc <tt>
	while(!(UCSRA&(1<<UDRE)));				// hold until conversion is completed
	UDR=t;									// PUT data into UDR registor
}
void usart_tx(unsigned char *tx)
{
	while(*tx!='\0')						// transfer data until we get NULL character ('\0')
  d6:	89 91       	ld	r24, Y+
  d8:	88 23       	and	r24, r24
  da:	d9 f7       	brne	.-10     	; 0xd2 <usart_tx+0xe>
	{
		tt(*tx);
		tx++;								// next character
	}
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <rx>:

int val=0,y,i;
unsigned char rx()
{
	while(!(UCSRA&(1<<RXC)));
  e2:	5f 9b       	sbis	0x0b, 7	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <rx>
	val = UDR;
  e6:	8c b1       	in	r24, 0x0c	; 12
  e8:	80 93 3e 01 	sts	0x013E, r24
  ec:	10 92 3f 01 	sts	0x013F, r1
}
  f0:	08 95       	ret

000000f2 <u_init>:

void u_init()
{
	UBRRL=8;					// PUT that value for 115200 BAUDRATE by chart
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	89 b9       	out	0x09, r24	; 9
	UCSRB|=(1<<TXEN)|(1<<RXEN);				// transmitt enable
  f6:	8a b1       	in	r24, 0x0a	; 10
  f8:	88 61       	ori	r24, 0x18	; 24
  fa:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	// setting for 8 bit character size (ex: 'A' = 01000001)
  fc:	80 b5       	in	r24, 0x20	; 32
  fe:	86 68       	ori	r24, 0x86	; 134
 100:	80 bd       	out	0x20, r24	; 32
}
 102:	08 95       	ret

00000104 <main>:
#include <string.h>
#include <stdlib.h>
#include "uart.h"
unsigned char as[10],LK;
int main(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <main+0x6>
 10a:	00 d0       	rcall	.+0      	; 0x10c <main+0x8>
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0B11111111;					//PORTB as OUTPUT PORT
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 bb       	out	0x17, r24	; 23
	DDRA |=(1<<PA7);						// OUTPUT direction for Buzzer
 114:	d7 9a       	sbi	0x1a, 7	; 26
	
	u_init();							//uart initialization
 116:	0e 94 79 00 	call	0xf2	; 0xf2 <u_init>
	
	usart_tx("AT+CWQAP\r\n");
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
	/************************************************************************/
	/* Turning All LEDs one by one                                                                     */
	/************************************************************************/
	for (int i=0;i<=3;i++)
 122:	ee 24       	eor	r14, r14
 124:	ff 24       	eor	r15, r15
	{
		PORTB |= (1<<i);
 126:	01 e0       	ldi	r16, 0x01	; 1
 128:	10 e0       	ldi	r17, 0x00	; 0
 12a:	28 b3       	in	r18, 0x18	; 24
 12c:	c8 01       	movw	r24, r16
 12e:	0e 2c       	mov	r0, r14
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0x32>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <main+0x2e>
 13a:	82 2b       	or	r24, r18
 13c:	88 bb       	out	0x18, r24	; 24
		buzzer();
 13e:	0e 94 49 00 	call	0x92	; 0x92 <buzzer>
	
	usart_tx("AT+CWQAP\r\n");
	/************************************************************************/
	/* Turning All LEDs one by one                                                                     */
	/************************************************************************/
	for (int i=0;i<=3;i++)
 142:	08 94       	sec
 144:	e1 1c       	adc	r14, r1
 146:	f1 1c       	adc	r15, r1
 148:	24 e0       	ldi	r18, 0x04	; 4
 14a:	e2 16       	cp	r14, r18
 14c:	f1 04       	cpc	r15, r1
 14e:	69 f7       	brne	.-38     	; 0x12a <main+0x26>
		PORTB |= (1<<i);
		buzzer();
	}

	
	usart_tx("AT\r\n");
 150:	8b e6       	ldi	r24, 0x6B	; 107
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	99 e6       	ldi	r25, 0x69	; 105
 15c:	a8 e1       	ldi	r26, 0x18	; 24
 15e:	81 50       	subi	r24, 0x01	; 1
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	a0 40       	sbci	r26, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x5a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x64>
 168:	00 00       	nop
	_delay_ms(500);
	
	usart_tx("ATE1\r\n");
 16a:	80 e7       	ldi	r24, 0x70	; 112
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	99 e6       	ldi	r25, 0x69	; 105
 176:	a8 e1       	ldi	r26, 0x18	; 24
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	a0 40       	sbci	r26, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x74>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x7e>
 182:	00 00       	nop
	_delay_ms(500);
	
	usart_tx("AT+CWJAP=\"anchal\"\,\"qwerqwer\"\r\r\n");
 184:	87 e7       	ldi	r24, 0x77	; 119
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	97 ea       	ldi	r25, 0xA7	; 167
 190:	a1 e6       	ldi	r26, 0x61	; 97
 192:	81 50       	subi	r24, 0x01	; 1
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	a0 40       	sbci	r26, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x8e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x98>
 19c:	00 00       	nop
	delay;	buzzer();
 19e:	0e 94 49 00 	call	0x92	; 0x92 <buzzer>
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	97 ea       	ldi	r25, 0xA7	; 167
 1a6:	a1 e6       	ldi	r26, 0x61	; 97
 1a8:	81 50       	subi	r24, 0x01	; 1
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	a0 40       	sbci	r26, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0xa4>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0xae>
 1b2:	00 00       	nop
	delay;	buzzer();
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <buzzer>
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	97 ea       	ldi	r25, 0xA7	; 167
 1bc:	a1 e6       	ldi	r26, 0x61	; 97
 1be:	81 50       	subi	r24, 0x01	; 1
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	a0 40       	sbci	r26, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0xba>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0xc4>
 1c8:	00 00       	nop
	delay;	buzzer();
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <buzzer>
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	97 ea       	ldi	r25, 0xA7	; 167
 1d2:	a1 e6       	ldi	r26, 0x61	; 97
 1d4:	81 50       	subi	r24, 0x01	; 1
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	a0 40       	sbci	r26, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0xd0>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0xda>
 1de:	00 00       	nop
	delay;
	
	while(1)
	{
		usart_tx("AT");
 1e0:	0f 2e       	mov	r0, r31
 1e2:	f7 e9       	ldi	r31, 0x97	; 151
 1e4:	af 2e       	mov	r10, r31
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	bf 2e       	mov	r11, r31
 1ea:	f0 2d       	mov	r31, r0
		usart_tx("\r\n");
 1ec:	0f 2e       	mov	r0, r31
 1ee:	fa e9       	ldi	r31, 0x9A	; 154
 1f0:	8f 2e       	mov	r8, r31
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	9f 2e       	mov	r9, r31
 1f6:	f0 2d       	mov	r31, r0
		
		_delay_ms(500);
		
		usart_tx("ATE1\r\n");
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f0 e7       	ldi	r31, 0x70	; 112
 1fc:	6f 2e       	mov	r6, r31
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	7f 2e       	mov	r7, r31
 202:	f0 2d       	mov	r31, r0
		_delay_ms(500);
		
		usart_tx("AT+CIPMUX=1\r\n");
 204:	0f 2e       	mov	r0, r31
 206:	fd e9       	ldi	r31, 0x9D	; 157
 208:	4f 2e       	mov	r4, r31
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	5f 2e       	mov	r5, r31
 20e:	f0 2d       	mov	r31, r0
		_delay_ms(500);
		
		usart_tx("AT+CIPSERVER=1,80\r\n");
 210:	0f 2e       	mov	r0, r31
 212:	fb ea       	ldi	r31, 0xAB	; 171
 214:	2f 2e       	mov	r2, r31
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	3f 2e       	mov	r3, r31
 21a:	f0 2d       	mov	r31, r0
		y = rx();
		LK = rx();
		
		for (int k=0;k<=6&&LK!='"';k++)
		{
			as[k]=LK;
 21c:	0f 2e       	mov	r0, r31
 21e:	f2 e4       	ldi	r31, 0x42	; 66
 220:	cf 2e       	mov	r12, r31
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	df 2e       	mov	r13, r31
 226:	f0 2d       	mov	r31, r0
			LK = rx();
 228:	d6 01       	movw	r26, r12
 22a:	11 96       	adiw	r26, 0x01	; 1
 22c:	ba 83       	std	Y+2, r27	; 0x02
 22e:	a9 83       	std	Y+1, r26	; 0x01
#include <util/delay.h>
#include <string.h>
#include <stdlib.h>
#include "uart.h"
unsigned char as[10],LK;
int main(void)
 230:	0f 2e       	mov	r0, r31
 232:	f7 e0       	ldi	r31, 0x07	; 7
 234:	ef 2e       	mov	r14, r31
 236:	ff 24       	eor	r15, r15
 238:	f0 2d       	mov	r31, r0
 23a:	ec 0c       	add	r14, r12
 23c:	fd 1c       	adc	r15, r13
 23e:	86 01       	movw	r16, r12
 240:	06 5f       	subi	r16, 0xF6	; 246
 242:	1f 4f       	sbci	r17, 0xFF	; 255
	delay;	buzzer();
	delay;
	
	while(1)
	{
		usart_tx("AT");
 244:	c5 01       	movw	r24, r10
 246:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
		usart_tx("\r\n");
 24a:	c4 01       	movw	r24, r8
 24c:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	99 e6       	ldi	r25, 0x69	; 105
 254:	a8 e1       	ldi	r26, 0x18	; 24
 256:	81 50       	subi	r24, 0x01	; 1
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	a0 40       	sbci	r26, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x152>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x15c>
 260:	00 00       	nop
		
		_delay_ms(500);
		
		usart_tx("ATE1\r\n");
 262:	c3 01       	movw	r24, r6
 264:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	99 e6       	ldi	r25, 0x69	; 105
 26c:	a8 e1       	ldi	r26, 0x18	; 24
 26e:	81 50       	subi	r24, 0x01	; 1
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	a0 40       	sbci	r26, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x16a>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x174>
 278:	00 00       	nop
		_delay_ms(500);
		
		usart_tx("AT+CIPMUX=1\r\n");
 27a:	c2 01       	movw	r24, r4
 27c:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	99 e6       	ldi	r25, 0x69	; 105
 284:	a8 e1       	ldi	r26, 0x18	; 24
 286:	81 50       	subi	r24, 0x01	; 1
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	a0 40       	sbci	r26, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x182>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x18c>
 290:	00 00       	nop
		_delay_ms(500);
		
		usart_tx("AT+CIPSERVER=1,80\r\n");
 292:	c1 01       	movw	r24, r2
 294:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	99 e6       	ldi	r25, 0x69	; 105
 29c:	a8 e1       	ldi	r26, 0x18	; 24
 29e:	81 50       	subi	r24, 0x01	; 1
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	a0 40       	sbci	r26, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x19a>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x1a4>
 2a8:	00 00       	nop
		_delay_ms(500);
		
		usart_tx("AT+CIPSTART=4,\"TCP\",\"184.106.153.149\",80\r\n");
 2aa:	8f eb       	ldi	r24, 0xBF	; 191
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	97 ea       	ldi	r25, 0xA7	; 167
 2b6:	a1 e6       	ldi	r26, 0x61	; 97
 2b8:	81 50       	subi	r24, 0x01	; 1
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	a0 40       	sbci	r26, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x1b4>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x1be>
 2c2:	00 00       	nop
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	97 ea       	ldi	r25, 0xA7	; 167
 2c8:	a1 e6       	ldi	r26, 0x61	; 97
 2ca:	81 50       	subi	r24, 0x01	; 1
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	a0 40       	sbci	r26, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x1c6>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x1d0>
 2d4:	00 00       	nop
		delay;delay;
		
		usart_tx("AT+CIPSEND=4,64\r\n");
 2d6:	8a ee       	ldi	r24, 0xEA	; 234
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	99 e6       	ldi	r25, 0x69	; 105
 2e2:	a8 e1       	ldi	r26, 0x18	; 24
 2e4:	81 50       	subi	r24, 0x01	; 1
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	a0 40       	sbci	r26, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x1e0>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x1ea>
 2ee:	00 00       	nop
		_delay_ms(500);
		
		usart_tx("GET /channels/341118/feeds.json?key=T30AHEJS0JGGRPIR&results=1\r\n");
 2f0:	8c ef       	ldi	r24, 0xFC	; 252
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 62 00 	call	0xc4	; 0xc4 <usart_tx>
		
		for (i=0;i<=297;i++)
 2f8:	10 92 41 01 	sts	0x0141, r1
 2fc:	10 92 40 01 	sts	0x0140, r1
		{
			LK = rx();
 300:	0e 94 71 00 	call	0xe2	; 0xe2 <rx>
 304:	80 93 4e 01 	sts	0x014E, r24
		usart_tx("AT+CIPSEND=4,64\r\n");
		_delay_ms(500);
		
		usart_tx("GET /channels/341118/feeds.json?key=T30AHEJS0JGGRPIR&results=1\r\n");
		
		for (i=0;i<=297;i++)
 308:	80 91 40 01 	lds	r24, 0x0140
 30c:	90 91 41 01 	lds	r25, 0x0141
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	90 93 41 01 	sts	0x0141, r25
 316:	80 93 40 01 	sts	0x0140, r24
 31a:	a1 e0       	ldi	r26, 0x01	; 1
 31c:	8a 32       	cpi	r24, 0x2A	; 42
 31e:	9a 07       	cpc	r25, r26
 320:	7c f3       	brlt	.-34     	; 0x300 <main+0x1fc>
		{
			LK = rx();
		}
		
		for (i=0;i<='6'&& LK!='f';i++)
 322:	10 92 41 01 	sts	0x0141, r1
 326:	10 92 40 01 	sts	0x0140, r1
 32a:	80 91 4e 01 	lds	r24, 0x014E
 32e:	86 36       	cpi	r24, 0x66	; 102
 330:	a1 f0       	breq	.+40     	; 0x35a <main+0x256>
		{
			LK = rx();
 332:	0e 94 71 00 	call	0xe2	; 0xe2 <rx>
 336:	80 93 4e 01 	sts	0x014E, r24
		for (i=0;i<=297;i++)
		{
			LK = rx();
		}
		
		for (i=0;i<='6'&& LK!='f';i++)
 33a:	80 91 40 01 	lds	r24, 0x0140
 33e:	90 91 41 01 	lds	r25, 0x0141
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	90 93 41 01 	sts	0x0141, r25
 348:	80 93 40 01 	sts	0x0140, r24
 34c:	87 33       	cpi	r24, 0x37	; 55
 34e:	91 05       	cpc	r25, r1
 350:	24 f4       	brge	.+8      	; 0x35a <main+0x256>
 352:	80 91 4e 01 	lds	r24, 0x014E
 356:	86 36       	cpi	r24, 0x66	; 102
 358:	61 f7       	brne	.-40     	; 0x332 <main+0x22e>
		{
			LK = rx();
		}
		
		for (i=0;i<='6'&& LK!=':';i++)
 35a:	10 92 41 01 	sts	0x0141, r1
 35e:	10 92 40 01 	sts	0x0140, r1
 362:	80 91 4e 01 	lds	r24, 0x014E
 366:	8a 33       	cpi	r24, 0x3A	; 58
 368:	a1 f0       	breq	.+40     	; 0x392 <main+0x28e>
		{
			LK = rx();
 36a:	0e 94 71 00 	call	0xe2	; 0xe2 <rx>
 36e:	80 93 4e 01 	sts	0x014E, r24
		for (i=0;i<='6'&& LK!='f';i++)
		{
			LK = rx();
		}
		
		for (i=0;i<='6'&& LK!=':';i++)
 372:	80 91 40 01 	lds	r24, 0x0140
 376:	90 91 41 01 	lds	r25, 0x0141
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	90 93 41 01 	sts	0x0141, r25
 380:	80 93 40 01 	sts	0x0140, r24
 384:	87 33       	cpi	r24, 0x37	; 55
 386:	91 05       	cpc	r25, r1
 388:	24 f4       	brge	.+8      	; 0x392 <main+0x28e>
 38a:	80 91 4e 01 	lds	r24, 0x014E
 38e:	8a 33       	cpi	r24, 0x3A	; 58
 390:	61 f7       	brne	.-40     	; 0x36a <main+0x266>
		{
			LK = rx();
		}
		
		y = rx();
 392:	0e 94 71 00 	call	0xe2	; 0xe2 <rx>
 396:	80 93 4c 01 	sts	0x014C, r24
 39a:	10 92 4d 01 	sts	0x014D, r1
		LK = rx();
 39e:	0e 94 71 00 	call	0xe2	; 0xe2 <rx>
 3a2:	80 93 4e 01 	sts	0x014E, r24
		
		for (int k=0;k<=6&&LK!='"';k++)
 3a6:	82 32       	cpi	r24, 0x22	; 34
 3a8:	b9 f5       	brne	.+110    	; 0x418 <main+0x314>
 3aa:	10 c0       	rjmp	.+32     	; 0x3cc <main+0x2c8>
		{
			as[k]=LK;
 3ac:	eb 81       	ldd	r30, Y+3	; 0x03
 3ae:	fc 81       	ldd	r31, Y+4	; 0x04
 3b0:	81 93       	st	Z+, r24
 3b2:	fc 83       	std	Y+4, r31	; 0x04
 3b4:	eb 83       	std	Y+3, r30	; 0x03
			LK = rx();
 3b6:	0e 94 71 00 	call	0xe2	; 0xe2 <rx>
 3ba:	80 93 4e 01 	sts	0x014E, r24
		}
		
		y = rx();
		LK = rx();
		
		for (int k=0;k<=6&&LK!='"';k++)
 3be:	2b 81       	ldd	r18, Y+3	; 0x03
 3c0:	3c 81       	ldd	r19, Y+4	; 0x04
 3c2:	2e 15       	cp	r18, r14
 3c4:	3f 05       	cpc	r19, r15
 3c6:	11 f0       	breq	.+4      	; 0x3cc <main+0x2c8>
 3c8:	82 32       	cpi	r24, 0x22	; 34
 3ca:	81 f7       	brne	.-32     	; 0x3ac <main+0x2a8>
		{
			as[k]=LK;
			LK = rx();
		}
		
		PORTB=0xff;PORTA|=(1<<PA7);
 3cc:	3f ef       	ldi	r19, 0xFF	; 255
 3ce:	38 bb       	out	0x18, r19	; 24
 3d0:	df 9a       	sbi	0x1b, 7	; 27
		y=atoi(as);
 3d2:	c6 01       	movw	r24, r12
 3d4:	0e 94 17 02 	call	0x42e	; 0x42e <atoi>
 3d8:	90 93 4d 01 	sts	0x014D, r25
 3dc:	80 93 4c 01 	sts	0x014C, r24
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	93 ed       	ldi	r25, 0xD3	; 211
 3e4:	a0 e3       	ldi	r26, 0x30	; 48
 3e6:	81 50       	subi	r24, 0x01	; 1
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	a0 40       	sbci	r26, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x2e2>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x2ec>
 3f0:	00 00       	nop
		_delay_ms(1000);
		PORTB=0;PORTA&=~(1<<PA7);
 3f2:	18 ba       	out	0x18, r1	; 24
 3f4:	df 98       	cbi	0x1b, 7	; 27
 3f6:	f6 01       	movw	r30, r12
		
		for (int u=0;u<=9;u++)
		{
			as[u]='\0';
 3f8:	11 92       	st	Z+, r1
		PORTB=0xff;PORTA|=(1<<PA7);
		y=atoi(as);
		_delay_ms(1000);
		PORTB=0;PORTA&=~(1<<PA7);
		
		for (int u=0;u<=9;u++)
 3fa:	e0 17       	cp	r30, r16
 3fc:	f1 07       	cpc	r31, r17
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0x2f4>
		{
			as[u]='\0';
		}
		if (y<=8)
 400:	80 91 4c 01 	lds	r24, 0x014C
 404:	90 91 4d 01 	lds	r25, 0x014D
 408:	89 30       	cpi	r24, 0x09	; 9
 40a:	91 05       	cpc	r25, r1
 40c:	1c f4       	brge	.+6      	; 0x414 <main+0x310>
		{
			PORTB = 0x0f;
 40e:	8f e0       	ldi	r24, 0x0F	; 15
 410:	88 bb       	out	0x18, r24	; 24
 412:	18 cf       	rjmp	.-464    	; 0x244 <main+0x140>
		}
		else
		PORTB = 0;
 414:	18 ba       	out	0x18, r1	; 24
 416:	16 cf       	rjmp	.-468    	; 0x244 <main+0x140>
		y = rx();
		LK = rx();
		
		for (int k=0;k<=6&&LK!='"';k++)
		{
			as[k]=LK;
 418:	d6 01       	movw	r26, r12
 41a:	8c 93       	st	X, r24
			LK = rx();
 41c:	0e 94 71 00 	call	0xe2	; 0xe2 <rx>
 420:	80 93 4e 01 	sts	0x014E, r24
 424:	e9 81       	ldd	r30, Y+1	; 0x01
 426:	fa 81       	ldd	r31, Y+2	; 0x02
 428:	fc 83       	std	Y+4, r31	; 0x04
 42a:	eb 83       	std	Y+3, r30	; 0x03
 42c:	cd cf       	rjmp	.-102    	; 0x3c8 <main+0x2c4>

0000042e <atoi>:
 42e:	fc 01       	movw	r30, r24
 430:	88 27       	eor	r24, r24
 432:	99 27       	eor	r25, r25
 434:	e8 94       	clt
 436:	21 91       	ld	r18, Z+
 438:	20 32       	cpi	r18, 0x20	; 32
 43a:	e9 f3       	breq	.-6      	; 0x436 <atoi+0x8>
 43c:	29 30       	cpi	r18, 0x09	; 9
 43e:	10 f0       	brcs	.+4      	; 0x444 <atoi+0x16>
 440:	2e 30       	cpi	r18, 0x0E	; 14
 442:	c8 f3       	brcs	.-14     	; 0x436 <atoi+0x8>
 444:	2b 32       	cpi	r18, 0x2B	; 43
 446:	41 f0       	breq	.+16     	; 0x458 <atoi+0x2a>
 448:	2d 32       	cpi	r18, 0x2D	; 45
 44a:	39 f4       	brne	.+14     	; 0x45a <atoi+0x2c>
 44c:	68 94       	set
 44e:	04 c0       	rjmp	.+8      	; 0x458 <atoi+0x2a>
 450:	0e 94 35 02 	call	0x46a	; 0x46a <__mulhi_const_10>
 454:	82 0f       	add	r24, r18
 456:	91 1d       	adc	r25, r1
 458:	21 91       	ld	r18, Z+
 45a:	20 53       	subi	r18, 0x30	; 48
 45c:	2a 30       	cpi	r18, 0x0A	; 10
 45e:	c0 f3       	brcs	.-16     	; 0x450 <atoi+0x22>
 460:	1e f4       	brtc	.+6      	; 0x468 <__stack+0x9>
 462:	90 95       	com	r25
 464:	81 95       	neg	r24
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <__mulhi_const_10>:
 46a:	7a e0       	ldi	r23, 0x0A	; 10
 46c:	97 9f       	mul	r25, r23
 46e:	90 2d       	mov	r25, r0
 470:	87 9f       	mul	r24, r23
 472:	80 2d       	mov	r24, r0
 474:	91 0d       	add	r25, r1
 476:	11 24       	eor	r1, r1
 478:	08 95       	ret

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
