
ADCtoDISPLAY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000202  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800064  00800064  0000029a  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000d40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000679  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f2  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000433  00000000  00000000  0000164b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000011e  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000057  00000000  00000000  00001c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3c       	cpi	r26, 0xC9	; 201
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  8a:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc>:
#include <stdlib.h>
#include <string.h>
#define dl _delay_ms(2000)
void adc()
{
	ADCSRA = 0b10000111;	// Enable ADC 
  92:	87 e8       	ldi	r24, 0x87	; 135
  94:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0b11000000;		// for channel zero(ADC0)
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	87 b9       	out	0x07, r24	; 7
}
  9a:	08 95       	ret

0000009c <buzzer>:
 */ 
#ifndef _Buzzer_
#define _Buzzer_
void buzzer()
	{
			PORTD|=(1<<7);
  9c:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	91 ee       	ldi	r25, 0xE1	; 225
  a2:	a4 e0       	ldi	r26, 0x04	; 4
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	a0 40       	sbci	r26, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <buzzer+0x8>
  ac:	00 c0       	rjmp	.+0      	; 0xae <buzzer+0x12>
  ae:	00 00       	nop
			_delay_ms(100);
			PORTD&=~(1<<7);
  b0:	97 98       	cbi	0x12, 7	; 18
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	91 ee       	ldi	r25, 0xE1	; 225
  b6:	a4 e0       	ldi	r26, 0x04	; 4
  b8:	81 50       	subi	r24, 0x01	; 1
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	a0 40       	sbci	r26, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <buzzer+0x1c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <buzzer+0x26>
  c2:	00 00       	nop
			_delay_ms(100);
	}			
  c4:	08 95       	ret

000000c6 <tt>:
#ifndef _UART_H_
#define _UART_H_

void tt(unsigned char t)
{
	while(!(UCSRA&(1<<UDRE)));				// hold until conversion is completed
  c6:	5d 9b       	sbis	0x0b, 5	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <tt>
	UDR=t;									// PUT data into UDR registor
  ca:	8c b9       	out	0x0c, r24	; 12
}
  cc:	08 95       	ret

000000ce <usart_tx>:
void usart_tx(unsigned char *tx)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	while(*tx!='\0')						// transfer data until we get NULL character ('\0')
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	31 f0       	breq	.+12     	; 0xe6 <usart_tx+0x18>
void tt(unsigned char t)
{
	while(!(UCSRA&(1<<UDRE)));				// hold until conversion is completed
	UDR=t;									// PUT data into UDR registor
}
void usart_tx(unsigned char *tx)
  da:	21 96       	adiw	r28, 0x01	; 1
{
	while(*tx!='\0')						// transfer data until we get NULL character ('\0')
	{
		tt(*tx);
  dc:	0e 94 63 00 	call	0xc6	; 0xc6 <tt>
	while(!(UCSRA&(1<<UDRE)));				// hold until conversion is completed
	UDR=t;									// PUT data into UDR registor
}
void usart_tx(unsigned char *tx)
{
	while(*tx!='\0')						// transfer data until we get NULL character ('\0')
  e0:	89 91       	ld	r24, Y+
  e2:	88 23       	and	r24, r24
  e4:	d9 f7       	brne	.-10     	; 0xdc <usart_tx+0xe>
	{
		tt(*tx);
		tx++;								// next character
	}
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <u_init>:
void u_init()
{
	UBRRL=8;					// PUT that value for 115200 BAUDRATE by chart
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	89 b9       	out	0x09, r24	; 9
	UCSRB|=(1<<TXEN);				// transmitt enable
  f0:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	// setting for 8 bit character size (ex: 'A' = 01000001)
  f2:	80 b5       	in	r24, 0x20	; 32
  f4:	86 68       	ori	r24, 0x86	; 134
  f6:	80 bd       	out	0x20, r24	; 32
}
  f8:	08 95       	ret

000000fa <main>:
unsigned char arr[100];


int main(void)
{
	DDRA = 0;							// PORTA as input PORT for analog sensors
  fa:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0B11111111;					//PORTB as OUTPUT PORT
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	87 bb       	out	0x17, r24	; 23
	DDRA |=(1<<7);						// OUTPUT direction for Buzzer
 100:	d7 9a       	sbi	0x1a, 7	; 26
	
	PORTB=0xff;
 102:	88 bb       	out	0x18, r24	; 24
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	93 ed       	ldi	r25, 0xD3	; 211
 108:	a0 e3       	ldi	r26, 0x30	; 48
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	a0 40       	sbci	r26, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x10>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x1a>
 114:	00 00       	nop
	_delay_ms(1000);
	PORTB=0;
 116:	18 ba       	out	0x18, r1	; 24
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	99 e6       	ldi	r25, 0x69	; 105
 11c:	a8 e1       	ldi	r26, 0x18	; 24
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	a0 40       	sbci	r26, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x24>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x2e>
 128:	00 00       	nop
	_delay_ms(500);

	adc();								// ADC initialization
 12a:	0e 94 49 00 	call	0x92	; 0x92 <adc>
	u_init();							// usart initialization (serial communication)
 12e:	0e 94 76 00 	call	0xec	; 0xec <u_init>
			while(1)
			{
				ADCSRA|=(1<<ADSC);				// Start conversion 
				while(!(ADCSRA&(1<<ADIF)));		// hold until conversion is completed
				as=ADC;							//assigning the value of ADC in as variable 
				itoa(as,arr,10);				// integer to character conversion
 132:	c4 e6       	ldi	r28, 0x64	; 100
 134:	d0 e0       	ldi	r29, 0x00	; 0
				usart_tx(arr);					//Now transmitting the decimal value from controller 
				usart_tx("\r\n");				// (\r --> for new row)(\n --> for new line) both to press enter
 136:	00 e6       	ldi	r16, 0x60	; 96
 138:	10 e0       	ldi	r17, 0x00	; 0
	adc();								// ADC initialization
	u_init();							// usart initialization (serial communication)
	
			while(1)
			{
				ADCSRA|=(1<<ADSC);				// Start conversion 
 13a:	36 9a       	sbi	0x06, 6	; 6
				while(!(ADCSRA&(1<<ADIF)));		// hold until conversion is completed
 13c:	34 9b       	sbis	0x06, 4	; 6
 13e:	fe cf       	rjmp	.-4      	; 0x13c <main+0x42>
				as=ADC;							//assigning the value of ADC in as variable 
 140:	84 b1       	in	r24, 0x04	; 4
 142:	95 b1       	in	r25, 0x05	; 5
 144:	80 93 c8 00 	sts	0x00C8, r24
				itoa(as,arr,10);				// integer to character conversion
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	be 01       	movw	r22, r28
 14c:	4a e0       	ldi	r20, 0x0A	; 10
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	0e 94 ba 00 	call	0x174	; 0x174 <itoa>
				usart_tx(arr);					//Now transmitting the decimal value from controller 
 154:	ce 01       	movw	r24, r28
 156:	0e 94 67 00 	call	0xce	; 0xce <usart_tx>
				usart_tx("\r\n");				// (\r --> for new row)(\n --> for new line) both to press enter
 15a:	c8 01       	movw	r24, r16
 15c:	0e 94 67 00 	call	0xce	; 0xce <usart_tx>
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	93 ed       	ldi	r25, 0xD3	; 211
 164:	a0 e3       	ldi	r26, 0x30	; 48
 166:	81 50       	subi	r24, 0x01	; 1
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	a0 40       	sbci	r26, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x6c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x76>
 170:	00 00       	nop
 172:	e3 cf       	rjmp	.-58     	; 0x13a <main+0x40>

00000174 <itoa>:
 174:	fb 01       	movw	r30, r22
 176:	9f 01       	movw	r18, r30
 178:	e8 94       	clt
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	c4 f0       	brlt	.+48     	; 0x1ae <itoa+0x3a>
 17e:	45 32       	cpi	r20, 0x25	; 37
 180:	b4 f4       	brge	.+44     	; 0x1ae <itoa+0x3a>
 182:	4a 30       	cpi	r20, 0x0A	; 10
 184:	29 f4       	brne	.+10     	; 0x190 <itoa+0x1c>
 186:	97 fb       	bst	r25, 7
 188:	1e f4       	brtc	.+6      	; 0x190 <itoa+0x1c>
 18a:	90 95       	com	r25
 18c:	81 95       	neg	r24
 18e:	9f 4f       	sbci	r25, 0xFF	; 255
 190:	64 2f       	mov	r22, r20
 192:	77 27       	eor	r23, r23
 194:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__udivmodhi4>
 198:	80 5d       	subi	r24, 0xD0	; 208
 19a:	8a 33       	cpi	r24, 0x3A	; 58
 19c:	0c f0       	brlt	.+2      	; 0x1a0 <itoa+0x2c>
 19e:	89 5d       	subi	r24, 0xD9	; 217
 1a0:	81 93       	st	Z+, r24
 1a2:	cb 01       	movw	r24, r22
 1a4:	00 97       	sbiw	r24, 0x00	; 0
 1a6:	a1 f7       	brne	.-24     	; 0x190 <itoa+0x1c>
 1a8:	16 f4       	brtc	.+4      	; 0x1ae <itoa+0x3a>
 1aa:	5d e2       	ldi	r21, 0x2D	; 45
 1ac:	51 93       	st	Z+, r21
 1ae:	10 82       	st	Z, r1
 1b0:	c9 01       	movw	r24, r18
 1b2:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <strrev>

000001b6 <strrev>:
 1b6:	dc 01       	movw	r26, r24
 1b8:	fc 01       	movw	r30, r24
 1ba:	67 2f       	mov	r22, r23
 1bc:	71 91       	ld	r23, Z+
 1be:	77 23       	and	r23, r23
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <strrev+0x4>
 1c2:	32 97       	sbiw	r30, 0x02	; 2
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <strrev+0x18>
 1c6:	7c 91       	ld	r23, X
 1c8:	6d 93       	st	X+, r22
 1ca:	70 83       	st	Z, r23
 1cc:	62 91       	ld	r22, -Z
 1ce:	ae 17       	cp	r26, r30
 1d0:	bf 07       	cpc	r27, r31
 1d2:	c8 f3       	brcs	.-14     	; 0x1c6 <strrev+0x10>
 1d4:	08 95       	ret

000001d6 <__udivmodhi4>:
 1d6:	aa 1b       	sub	r26, r26
 1d8:	bb 1b       	sub	r27, r27
 1da:	51 e1       	ldi	r21, 0x11	; 17
 1dc:	07 c0       	rjmp	.+14     	; 0x1ec <__udivmodhi4_ep>

000001de <__udivmodhi4_loop>:
 1de:	aa 1f       	adc	r26, r26
 1e0:	bb 1f       	adc	r27, r27
 1e2:	a6 17       	cp	r26, r22
 1e4:	b7 07       	cpc	r27, r23
 1e6:	10 f0       	brcs	.+4      	; 0x1ec <__udivmodhi4_ep>
 1e8:	a6 1b       	sub	r26, r22
 1ea:	b7 0b       	sbc	r27, r23

000001ec <__udivmodhi4_ep>:
 1ec:	88 1f       	adc	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	5a 95       	dec	r21
 1f2:	a9 f7       	brne	.-22     	; 0x1de <__udivmodhi4_loop>
 1f4:	80 95       	com	r24
 1f6:	90 95       	com	r25
 1f8:	bc 01       	movw	r22, r24
 1fa:	cd 01       	movw	r24, r26
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
