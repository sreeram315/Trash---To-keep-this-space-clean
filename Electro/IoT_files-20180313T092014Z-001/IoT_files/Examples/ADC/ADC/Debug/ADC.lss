
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000f0  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000184  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000008d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000432  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014f  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034c  00000000  00000000  00000ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ec  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  8a:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc>:
#include <stdlib.h>
#include <string.h>
#define dl _delay_ms(2000)
void adc()
{
	ADCSRA = 0b10000111;	// Enable ADC 
  92:	87 e8       	ldi	r24, 0x87	; 135
  94:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0b11000000;		// for channel zero(ADC0)
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	87 b9       	out	0x07, r24	; 7
}
  9a:	08 95       	ret

0000009c <main>:
#include "adc1.h"


int main(void)
{
	DDRC = 0;							// PORTC as input PORT for analog sensors
  9c:	14 ba       	out	0x14, r1	; 20
	DDRB = 0B11111111;					//PORTB as OUTPUT PORT
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
	DDRA |=(1<<PA7);						// OUTPUT direction for Buzzer
  a2:	d7 9a       	sbi	0x1a, 7	; 26
	
	adc();								//ADC initialization 
  a4:	0e 94 49 00 	call	0x92	; 0x92 <adc>
						{
							PORTB=0b00000000;			//then Turn OFF all LEDs
						}
						else
						{
							PORTB=0b11111111;			// Turn ON all (8) LEDs
  a8:	2f ef       	ldi	r18, 0xFF	; 255
	DDRA |=(1<<PA7);						// OUTPUT direction for Buzzer
	
	adc();								//ADC initialization 
	while(1)
	{
		ADCSRA|=(1<<ADSC);								// ADC start conversion 
  aa:	36 9a       	sbi	0x06, 6	; 6
		while(!(ADCSRA&(1<<ADIF)));						// Wait until conversion is completed 
  ac:	34 9b       	sbis	0x06, 4	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x10>
		as=ADC;										//Put the ADC value in as variable 
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	80 93 60 00 	sts	0x0060, r24
		
						if (as<13)						//if value of ADC is less then 13 
  b8:	8d 30       	cpi	r24, 0x0D	; 13
  ba:	10 f4       	brcc	.+4      	; 0xc0 <main+0x24>
						{
							PORTB=0b00000000;			//then Turn OFF all LEDs
  bc:	18 ba       	out	0x18, r1	; 24
  be:	f5 cf       	rjmp	.-22     	; 0xaa <main+0xe>
						}
						else
						{
							PORTB=0b11111111;			// Turn ON all (8) LEDs
  c0:	28 bb       	out	0x18, r18	; 24
							PORTA|=(1<<7);				// Buzzer ON
  c2:	df 9a       	sbi	0x1b, 7	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	91 ee       	ldi	r25, 0xE1	; 225
  c8:	a4 e0       	ldi	r26, 0x04	; 4
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	a0 40       	sbci	r26, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x2e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x38>
  d4:	00 00       	nop
							_delay_ms(100);				// 100 millisecond delay
							PORTA&=~(1<<7);				//Turn OFF buzzer
  d6:	df 98       	cbi	0x1b, 7	; 27
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	91 ee       	ldi	r25, 0xE1	; 225
  dc:	a4 e0       	ldi	r26, 0x04	; 4
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	a0 40       	sbci	r26, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x42>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x4c>
  e8:	00 00       	nop
  ea:	df cf       	rjmp	.-66     	; 0xaa <main+0xe>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
