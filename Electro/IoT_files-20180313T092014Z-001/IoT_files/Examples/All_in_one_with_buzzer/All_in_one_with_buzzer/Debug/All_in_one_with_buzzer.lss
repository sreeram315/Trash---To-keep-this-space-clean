
All_in_one_with_buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000958  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004e0  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000163  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ca  00000000  00000000  0000101b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011d  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  00001539  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e9       	ldi	r30, 0x90	; 144
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	10 d0       	rcall	.+32     	; 0x7a <main>
  5a:	98 c0       	rjmp	.+304    	; 0x18c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <buzzer>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
void buzzer()
{
	PORTB = 0;
  5e:	18 ba       	out	0x18, r1	; 24
	PORTD =0b00000100;								//To turn ON Buzzer (connected to PIN number PD2 )
  60:	84 e0       	ldi	r24, 0x04	; 4
  62:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	99 e6       	ldi	r25, 0x69	; 105
  68:	a8 e1       	ldi	r26, 0x18	; 24
  6a:	81 50       	subi	r24, 0x01	; 1
  6c:	90 40       	sbci	r25, 0x00	; 0
  6e:	a0 40       	sbci	r26, 0x00	; 0
  70:	e1 f7       	brne	.-8      	; 0x6a <buzzer+0xc>
  72:	00 c0       	rjmp	.+0      	; 0x74 <buzzer+0x16>
  74:	00 00       	nop
	_delay_ms(500);									//Delay of Half second
	PORTD =0b00000000;								//To turn OFF Buzzer (connected to PIN number PD2 )
  76:	12 ba       	out	0x12, r1	; 18
											//turn PORTB zero.
	
}
  78:	08 95       	ret

0000007a <main>:
int main(void)
{
	int i,j;
	DDRB = 0b11111111;									// For OUTPUT direction
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b00000100;									// For Buzzer (connected to PIN number PD2 )
  7e:	84 e0       	ldi	r24, 0x04	; 4
  80:	81 bb       	out	0x11, r24	; 17
    while(1)											// infinite loop
    {
		buzzer();										//Buzzer function
		
		PORTB = 0b00001111;								//turn ON all 4 led
  82:	0f 2e       	mov	r0, r31
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	ef 2e       	mov	r14, r31
  88:	f0 2d       	mov	r31, r0
		
		buzzer();										//Buzzer function
		
		for (i=0;i<=3;i++)
		{
			PORTB = (1<<i);								//led shifting	
  8a:	01 e0       	ldi	r16, 0x01	; 1
  8c:	12 e0       	ldi	r17, 0x02	; 2
  8e:	d4 e0       	ldi	r29, 0x04	; 4
  90:	c8 e0       	ldi	r28, 0x08	; 8
		
		buzzer();										//Buzzer function
		
        for (i=3,j=0;i>=2,j<=1;i--,j++)					//loop to shift LED for 0 to 3 
        {
			PORTB = (1<<i)|(1<<j);						// led shifting
  92:	0f 2e       	mov	r0, r31
  94:	f9 e0       	ldi	r31, 0x09	; 9
  96:	ff 2e       	mov	r15, r31
  98:	f0 2d       	mov	r31, r0
  9a:	0f 2e       	mov	r0, r31
  9c:	f6 e0       	ldi	r31, 0x06	; 6
  9e:	df 2e       	mov	r13, r31
  a0:	f0 2d       	mov	r31, r0
	int i,j;
	DDRB = 0b11111111;									// For OUTPUT direction
	DDRD = 0b00000100;									// For Buzzer (connected to PIN number PD2 )
    while(1)											// infinite loop
    {
		buzzer();										//Buzzer function
  a2:	dd df       	rcall	.-70     	; 0x5e <buzzer>
		
		PORTB = 0b00001111;								//turn ON all 4 led
  a4:	e8 ba       	out	0x18, r14	; 24
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	93 ed       	ldi	r25, 0xD3	; 211
  aa:	a0 e3       	ldi	r26, 0x30	; 48
  ac:	81 50       	subi	r24, 0x01	; 1
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	a0 40       	sbci	r26, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x32>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x3c>
  b6:	00 00       	nop
		_delay_ms(1000);								// delay of one second
		
		buzzer();										//Buzzer function
  b8:	d2 df       	rcall	.-92     	; 0x5e <buzzer>
		
		for (i=0;i<=3;i++)
		{
			PORTB = (1<<i);								//led shifting	
  ba:	08 bb       	out	0x18, r16	; 24
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	93 ed       	ldi	r25, 0xD3	; 211
  c0:	a0 e3       	ldi	r26, 0x30	; 48
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	a0 40       	sbci	r26, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x48>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x52>
  cc:	00 00       	nop
  ce:	18 bb       	out	0x18, r17	; 24
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	93 ed       	ldi	r25, 0xD3	; 211
  d4:	a0 e3       	ldi	r26, 0x30	; 48
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	a0 40       	sbci	r26, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x5c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x66>
  e0:	00 00       	nop
  e2:	d8 bb       	out	0x18, r29	; 24
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	93 ed       	ldi	r25, 0xD3	; 211
  e8:	a0 e3       	ldi	r26, 0x30	; 48
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	a0 40       	sbci	r26, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x70>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x7a>
  f4:	00 00       	nop
  f6:	c8 bb       	out	0x18, r28	; 24
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	93 ed       	ldi	r25, 0xD3	; 211
  fc:	a0 e3       	ldi	r26, 0x30	; 48
  fe:	81 50       	subi	r24, 0x01	; 1
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	a0 40       	sbci	r26, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x84>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x8e>
 108:	00 00       	nop
			_delay_ms(1000);								//delay of 1 second
		}
		
		buzzer();										//Buzzer function
 10a:	a9 df       	rcall	.-174    	; 0x5e <buzzer>
		
		for (i=3;i>=0;i--)
		{
			PORTB = (1<<i);								//led shifting
 10c:	c8 bb       	out	0x18, r28	; 24
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	93 ed       	ldi	r25, 0xD3	; 211
 112:	a0 e3       	ldi	r26, 0x30	; 48
 114:	81 50       	subi	r24, 0x01	; 1
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	a0 40       	sbci	r26, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x9a>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0xa4>
 11e:	00 00       	nop
 120:	d8 bb       	out	0x18, r29	; 24
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	93 ed       	ldi	r25, 0xD3	; 211
 126:	a0 e3       	ldi	r26, 0x30	; 48
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	a0 40       	sbci	r26, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0xae>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0xb8>
 132:	00 00       	nop
 134:	18 bb       	out	0x18, r17	; 24
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	93 ed       	ldi	r25, 0xD3	; 211
 13a:	a0 e3       	ldi	r26, 0x30	; 48
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	a0 40       	sbci	r26, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0xc2>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xcc>
 146:	00 00       	nop
 148:	08 bb       	out	0x18, r16	; 24
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	93 ed       	ldi	r25, 0xD3	; 211
 14e:	a0 e3       	ldi	r26, 0x30	; 48
 150:	81 50       	subi	r24, 0x01	; 1
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	a0 40       	sbci	r26, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0xd6>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xe0>
 15a:	00 00       	nop
			_delay_ms(1000);								//delay of 1 second
		}
		
		buzzer();										//Buzzer function
 15c:	80 df       	rcall	.-256    	; 0x5e <buzzer>
		
        for (i=3,j=0;i>=2,j<=1;i--,j++)					//loop to shift LED for 0 to 3 
        {
			PORTB = (1<<i)|(1<<j);						// led shifting
 15e:	f8 ba       	out	0x18, r15	; 24
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	93 ed       	ldi	r25, 0xD3	; 211
 164:	a0 e3       	ldi	r26, 0x30	; 48
 166:	81 50       	subi	r24, 0x01	; 1
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	a0 40       	sbci	r26, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0xec>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0xf6>
 170:	00 00       	nop
 172:	d8 ba       	out	0x18, r13	; 24
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	93 ed       	ldi	r25, 0xD3	; 211
 178:	a0 e3       	ldi	r26, 0x30	; 48
 17a:	81 50       	subi	r24, 0x01	; 1
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	a0 40       	sbci	r26, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x100>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x10a>
 184:	00 00       	nop
			_delay_ms(1000);							// delay of one second
        }
		
		buzzer();										//Buzzer function
 186:	6b df       	rcall	.-298    	; 0x5e <buzzer>
		buzzer();										//Buzzer function
 188:	6a df       	rcall	.-300    	; 0x5e <buzzer>
 18a:	8b cf       	rjmp	.-234    	; 0xa2 <main+0x28>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
