C51 COMPILER V9.52.0.0   DS1307                                                            03/23/2016 19:38:57 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DS1307
OBJECT MODULE PLACED IN DS1307.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE DS1307.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "Includes.h"
   2          
   3          // Global RTC Array and temp variable
   4          unsigned char pRTCArray[4];
   5          unsigned char Temp;
   6          
   7             
   8          // Function Purpose: delay generate some delay according to d value  
   9          void delay(unsigned int d)
  10          {
  11   1        unsigned int i;
  12   1        for(i=0;i<d;i++);
  13   1      }
  14          
  15          
  16          
  17          // Function Purpose: Write_Byte_To_DS1307_RTC writes a single byte on given address
  18          // Address can have any value fromm 0 to 0xFF, and DataByte can have a value of 0 to 0xFF.
  19          void Write_Byte_To_DS1307_RTC(unsigned char Address, unsigned char DataByte)
  20          {
  21   1        I2C_Start();                    // Start i2c communication
  22   1      
  23   1        // Send i2c address of DS1307 with write command
  24   1        while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
  25   1        { I2C_Start();  }   
  26   1      
  27   1        I2C_Write_Byte(Address);              // Write Address byte
  28   1        I2C_Write_Byte(DataByte);             // Write data byte
  29   1        I2C_Stop();                     // Stop i2c communication
  30   1      }
  31          
  32          
  33          
  34          // Function Purpose: Read_Byte_From_DS1307_RTC reads a single byte from given address
  35          // Address can have any value fromm 0 to 0xFF.
  36          unsigned char Read_Byte_From_DS1307_RTC(unsigned char Address)
  37          {
  38   1        unsigned char Byte = 0;               // Variable to store Received byte
  39   1      
  40   1        I2C_Start();                    // Start i2c communication
  41   1      
  42   1        // Send i2c address of DS1307 with write command
  43   1        while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
  44   1        { I2C_Start();  }   
  45   1      
  46   1        I2C_Write_Byte(Address);              // Write Address byte
  47   1        I2C_ReStart();                    // Restart i2c
  48   1      
  49   1        // Send i2c address of DS1307 RTC with read command 
  50   1        I2C_Write_Byte(Device_Address_DS1307_EEPROM + 1);   
  51   1      
  52   1        Byte = I2C_Read_Byte();               // Read byte from EEPROM
  53   1      
  54   1        // Make SCK low, so that slave can stop driving SDA pin
  55   1        // Send a NACK to indiacate single byte read is complete
C51 COMPILER V9.52.0.0   DS1307                                                            03/23/2016 19:38:57 PAGE 2   

  56   1        I2C_Send_NACK();
  57   1      
  58   1        // Send start bit and then stop bit to stop transmission
  59   1        Set_SDA_Low;        // Make SDA Low
  60   1        __delay_us(HalfBitDelay); // Half bit delay
  61   1        Set_SDA_High;       // Make SDA high
  62   1        __delay_us(HalfBitDelay); // Half bit delay
  63   1      
  64   1        return Byte;        // Return the byte received from 24LC64 EEPROM
  65   1      }
  66          
  67          
  68          
  69          // Function Purpose: Write_Bytes_To_DS1307_RTC writes mulitple bytes from given starting address.
  70          // Address can have any value fromm 0 to 0xFF and pData is pointer to the array
  71          // containing NoOfBytes bytes in it. NoOfBytes is the number of bytes to write.
  72          void Write_Bytes_To_DS1307_RTC(unsigned char Address,unsigned char* pData,unsigned char NoOfBytes)
  73          {
  74   1        unsigned int i;
  75   1      
  76   1        I2C_Start();                    // Start i2c communication
  77   1      
  78   1        // Send i2c address of DS1307 with write command
  79   1        while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
  80   1        { I2C_Start();  }   
  81   1      
  82   1        I2C_Write_Byte(Address);              // Write Address byte
  83   1      
  84   1        for(i=0;i<NoOfBytes;i++)              // Write NoOfBytes
  85   1          I2C_Write_Byte(pData[i]);           // Write data byte
  86   1      
  87   1        I2C_Stop();                     // Stop i2c communication
  88   1      }
  89          
  90          
  91          
  92          
  93          // Function Purpose: Read_Bytes_From_DS1307_RTC reads a NoOfBytes bytes from given starting address.
  94          // Address can have any value fromm 0 to 0xFF. NoOfBytes is the number of bytes to write.
  95          // Read bytes are returned in pData array.
  96          void Read_Bytes_From_DS1307_RTC(unsigned char Address, unsigned char* pData, unsigned int NoOfBytes)
  97          {
  98   1        unsigned int i;
  99   1      
 100   1        I2C_Start();                    // Start i2c communication
 101   1      
 102   1        // Send i2c address of DS1307 with write command
 103   1        while(I2C_Write_Byte(Device_Address_DS1307_EEPROM + 0) == 1)// Wait until device is free
 104   1        { I2C_Start();  }   
 105   1      
 106   1        I2C_Write_Byte(Address);              // Write Address byte
 107   1        I2C_ReStart();                    // Restart i2c
 108   1      
 109   1        // Send i2c address of DS1307 RTC with read command 
 110   1        I2C_Write_Byte(Device_Address_DS1307_EEPROM + 1);     
 111   1      
 112   1        pData[0] = I2C_Read_Byte();             // Read First byte from EEPROM
 113   1      
 114   1        for(i=1;i<NoOfBytes;i++)              // Read NoOfBytes
 115   1        {   
 116   2          I2C_Send_ACK();         // Give Ack to slave to start receiving next byte
 117   2          pData[i] = I2C_Read_Byte();   // Read next byte from EEPROM
C51 COMPILER V9.52.0.0   DS1307                                                            03/23/2016 19:38:57 PAGE 3   

 118   2        }
 119   1      
 120   1        // Make SCK low, so that slave can stop driving SDA pin
 121   1        // Send a NACK to indiacate read operation is complete
 122   1        I2C_Send_NACK();
 123   1      
 124   1        // Send start bit and then stop bit to stop transmission
 125   1        Set_SDA_Low;        // Make SDA Low
 126   1        __delay_us(HalfBitDelay); // Half bit delay
 127   1        Set_SDA_High;       // Make SDA high
 128   1        __delay_us(HalfBitDelay); // Half bit delay
 129   1      }
 130          
 131          
 132          
 133          
 134          // Function Purpose: Set_DS1307_RTC_Time sets given time in RTC registers.
 135          // Mode can have a value AM_Time or PM_Time or TwentyFourHoursMode only.
 136          // Hours can have value from 0 to 23 only.
 137          // Mins can have value from 0 to 59 only.
 138          // Secs can have value from 0 to 59 only.
 139          void Set_DS1307_RTC_Time(unsigned char Mode, unsigned char Hours, unsigned char Mins, unsigned char Secs)
 140          {
 141   1        // Convert Hours, Mins, Secs into BCD
 142   1        pRTCArray[0] = (((unsigned char)(Secs/10))<<4)|((unsigned char)(Secs%10));
 143   1        pRTCArray[1] = (((unsigned char)(Mins/10))<<4)|((unsigned char)(Mins%10));
 144   1        pRTCArray[2] = (((unsigned char)(Hours/10))<<4)|((unsigned char)(Hours%10));
 145   1      
 146   1        switch(Mode)  // Set mode bits
 147   1        {
 148   2        case AM_Time:   pRTCArray[2] |= 0x40; break;
 149   2        case PM_Time:   pRTCArray[2] |= 0x60; break;
 150   2        
 151   2        default:  break;  // do nothing for 24HoursMode
 152   2        }
 153   1      
 154   1        // WritepRTCArray to DS1307
 155   1        Write_Bytes_To_DS1307_RTC(0x00, pRTCArray, 3);
 156   1      }
 157          
 158          
 159          
 160          
 161          
 162          // Function Purpose: Get_DS1307_RTC_Time returns current time from RTC registers.
 163          // Pointer to pRTCArray is returned, in this array
 164          // pRTCArray[3] can have a value AM_Time or PM_Time or TwentyFourHoursMode only.
 165          // pRTCArray[2] (Hours byte) can have value from 0 to 23 only.
 166          // pRTCArray[1] (Mins byte) can have value from 0 to 59 only.
 167          // pRTCArray[0] (Secs byte) can have value from 0 to 59 only.
 168          unsigned char* Get_DS1307_RTC_Time(void)
 169          {
 170   1        // Read Hours, Mins, Secs register from RTC
 171   1        Read_Bytes_From_DS1307_RTC(0x00, pRTCArray, 3);
 172   1      
 173   1        // Convert Secs back from BCD into number
 174   1        Temp = pRTCArray[0];
 175   1        pRTCArray[0] = ((Temp&0x7F)>>4)*10 + (Temp&0x0F);
 176   1      
 177   1        // Convert Mins back from BCD into number
 178   1        Temp = pRTCArray[1];
 179   1        pRTCArray[1] = (Temp>>4)*10 + (Temp&0x0F);
C51 COMPILER V9.52.0.0   DS1307                                                            03/23/2016 19:38:57 PAGE 4   

 180   1      
 181   1        // Convert Hours back from BCD into number
 182   1        if(pRTCArray[2]&0x40) // if 12 hours mode
 183   1        {
 184   2          if(pRTCArray[2]&0x20) // if PM Time
 185   2            pRTCArray[3] = PM_Time;
 186   2          else    // if AM time
 187   2            pRTCArray[3] = AM_Time;
 188   2      
 189   2          Temp = pRTCArray[2];
 190   2          pRTCArray[2] = ((Temp&0x1F)>>4)*10 + (Temp&0x0F);
 191   2        }
 192   1        else    // if 24 hours mode
 193   1        {
 194   2          Temp = pRTCArray[2];
 195   2          pRTCArray[2] = (Temp>>4)*10 + (Temp&0x0F);
 196   2          pRTCArray[3] = TwentyFourHoursMode;
 197   2        }
 198   1      
 199   1        return pRTCArray;
 200   1      }
 201          
 202          
 203          
 204          
 205          
 206          // Function Purpose: Set_DS1307_RTC_Date sets given date in RTC registers.
 207          // Year can have a value from 0 to 99 only.
 208          // Month can have value from 1 to 12 only.
 209          // Date can have value from 1 to 31 only.
 210          // Day can have value from 1 to 7 only. Where 1 means Monday, 2 means Tuesday etc.
 211          void Set_DS1307_RTC_Date(unsigned char Date, unsigned char Month, unsigned char Year, unsigned char Day)
 212          {
 213   1        // Convert Year, Month, Date, Day into BCD
 214   1        pRTCArray[0] = (((unsigned char)(Day/10))<<4)|((unsigned char)(Day%10));
 215   1        pRTCArray[1] = (((unsigned char)(Date/10))<<4)|((unsigned char)(Date%10));
 216   1        pRTCArray[2] = (((unsigned char)(Month/10))<<4)|((unsigned char)(Month%10));
 217   1        pRTCArray[3] = (((unsigned char)(Year/10))<<4)|((unsigned char)(Year%10));
 218   1      
 219   1        // WritepRTCArray to DS1307
 220   1        Write_Bytes_To_DS1307_RTC(0x03, pRTCArray, 4);
 221   1      }
 222          
 223          
 224          
 225          
 226          // Function Purpose: Get_DS1307_RTC_Date returns current date from RTC registers.
 227          // Pointer to pRTCArray is returned, in this array
 228          // pRTCArray[3] (Year byte) can have value from 0 to 99 only.
 229          // pRTCArray[2] (Month byte) can have value from 1 to 12 only.
 230          // pRTCArray[1] (Date byte) can have value from 1 to 31 only.
 231          // pRTCArray[0] (Day byte) can have value from 1 to 7 only.
 232          unsigned char* Get_DS1307_RTC_Date(void)
 233          {
 234   1        // Read Hours, Mins, Secs register from RTC
 235   1        Read_Bytes_From_DS1307_RTC(0x03, pRTCArray, 4);
 236   1      
 237   1        // Convert Date back from BCD into number
 238   1        Temp = pRTCArray[1];
 239   1        pRTCArray[1] = (Temp>>4)*10 + (Temp&0x0F);
 240   1      
 241   1        // Convert Month back from BCD into number
C51 COMPILER V9.52.0.0   DS1307                                                            03/23/2016 19:38:57 PAGE 5   

 242   1        Temp = pRTCArray[2];
 243   1        pRTCArray[2] = (Temp>>4)*10 + (Temp&0x0F);
 244   1      
 245   1        // Convert Year back from BCD into number
 246   1        Temp = pRTCArray[3];
 247   1        pRTCArray[3] = (Temp>>4)*10 + (Temp&0x0F);
 248   1      
 249   1        return pRTCArray;
 250   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    696    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
